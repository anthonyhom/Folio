{"ast":null,"code":"var _jsxFileName = \"/Users/anthonyhom/Documents/atam-web/src/Component/ExplorePostsList.js\";\nimport React from \"react\";\nimport ExPost from \"./ExPosts.js\";\nimport PostForm from \"./PostForm.js\";\nimport \"../css/Explore.css\";\nimport \"../css/grid.css\";\nimport Profile from \"./Profile.js\";\nexport default class ExplorePostsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      posts: [],\n      isPublic: false,\n      publicUsers: []\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.specificUser != null) {\n      this.loadUserPosts(this.props.specificUser);\n    } else if (this.props.specificUser == null) {\n      this.loadPosts();\n    } // console.log(this.props.specificUser);\n\n  }\n\n  loadPosts(valueFromParent) {\n    fetch(\"http://stark.cse.buffalo.edu/cse410/atam/api/postcontroller.php\", {\n      method: \"post\",\n      body: JSON.stringify({\n        action: \"getPosts\",\n        max_posts: \"25\",\n        posttype: this.props.valueFromParent\n      })\n    }).then(res => res.json()).then(result => {\n      if (result.posts) {\n        this.setState({\n          isLoaded: true,\n          posts: result.posts\n        });\n      }\n    }, error => {\n      this.setState({\n        isLoaded: true,\n        error\n      });\n    }); // console.log(this.props.valueFromParent);\n  } // filtering(posts) {\n  //   let filterPosts = [];\n  //   fetch(\"http://stark.cse.buffalo.edu/cse410/atam/api/usercontroller.php\", {\n  //     method: \"post\",\n  //     body: JSON.stringify({\n  //       action: \"getUsers\",\n  //       status: \"public\",\n  //     }),\n  //   })\n  //     .then((res) => res.json())\n  //     .then(\n  //       (result) => {\n  //         // console.log(result);\n  //         for (var i = 0; i < posts.length; i++) {\n  //           for (var j = 0; j < result.users.length; j++) {\n  //             if (posts[i].user_id === result.users[j].user_id) {\n  //               filterPosts.push(posts[i]);\n  //               this.setState({\n  //                 publicUsers: filterPosts,\n  //               });\n  //             }\n  //           }\n  //         }\n  //       },\n  //       (error) => {}\n  //     );\n  // }\n  // filterBlocks(posts) {\n  // }\n\n\n  render() {\n    const {\n      error,\n      isLoaded,\n      posts\n    } = this.state; // this.filtering(posts);\n    // this.filtering(posts);\n    // console.log(\"THIS IS PUBLICUSERS\", this.state.publicUsers);\n\n    if (error) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        },\n        __self: this\n      }, \" Error: \", error.message, \" \");\n    } else if (!isLoaded) {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, \" No posts found \");\n    } else {\n      return React.createElement(\"div\", {\n        class: \"grid\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, this.state.posts.map(post => React.createElement(\"div\", {\n        className: \"grid-posts\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(ExPost, {\n        key: post.post_id,\n        post: post,\n        type: this.props.type,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }))));\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/anthonyhom/Documents/atam-web/src/Component/ExplorePostsList.js"],"names":["React","ExPost","PostForm","Profile","ExplorePostsList","Component","constructor","props","state","error","isLoaded","posts","isPublic","publicUsers","componentDidMount","specificUser","loadUserPosts","loadPosts","valueFromParent","fetch","method","body","JSON","stringify","action","max_posts","posttype","then","res","json","result","setState","render","message","map","post","post_id","type"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport ExPost from \"./ExPosts.js\";\nimport PostForm from \"./PostForm.js\";\nimport \"../css/Explore.css\";\nimport \"../css/grid.css\";\nimport Profile from \"./Profile.js\";\n\nexport default class ExplorePostsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      error: null,\n      isLoaded: false,\n      posts: [],\n      isPublic: false,\n      publicUsers: [],\n    };\n  }\n\n  componentDidMount() {\n    if (this.props.specificUser != null) {\n      this.loadUserPosts(this.props.specificUser);\n    } else if (this.props.specificUser == null) {\n      this.loadPosts();\n    }\n    // console.log(this.props.specificUser);\n  }\n  loadPosts(valueFromParent) {\n    fetch(\"http://stark.cse.buffalo.edu/cse410/atam/api/postcontroller.php\", {\n      method: \"post\",\n      body: JSON.stringify({\n        action: \"getPosts\",\n        max_posts: \"25\",\n        posttype: this.props.valueFromParent,\n      }),\n    })\n      .then((res) => res.json())\n      .then(\n        (result) => {\n          if (result.posts) {\n            this.setState({\n              isLoaded: true,\n\n              posts: result.posts,\n            });\n          }\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error,\n          });\n        }\n      );\n\n    // console.log(this.props.valueFromParent);\n  }\n\n  // filtering(posts) {\n  //   let filterPosts = [];\n\n  //   fetch(\"http://stark.cse.buffalo.edu/cse410/atam/api/usercontroller.php\", {\n  //     method: \"post\",\n  //     body: JSON.stringify({\n  //       action: \"getUsers\",\n  //       status: \"public\",\n  //     }),\n  //   })\n  //     .then((res) => res.json())\n  //     .then(\n  //       (result) => {\n  //         // console.log(result);\n  //         for (var i = 0; i < posts.length; i++) {\n  //           for (var j = 0; j < result.users.length; j++) {\n  //             if (posts[i].user_id === result.users[j].user_id) {\n  //               filterPosts.push(posts[i]);\n  //               this.setState({\n  //                 publicUsers: filterPosts,\n  //               });\n  //             }\n  //           }\n  //         }\n  //       },\n  //       (error) => {}\n  //     );\n  // }\n  // filterBlocks(posts) {\n\n  // }\n  render() {\n    const { error, isLoaded, posts } = this.state;\n    // this.filtering(posts);\n    // this.filtering(posts);\n    // console.log(\"THIS IS PUBLICUSERS\", this.state.publicUsers);\n    if (error) {\n      return <div> Error: {error.message} </div>;\n    } else if (!isLoaded) {\n      return <div> No posts found </div>;\n    } else {\n      return (\n        <div class=\"grid\">\n          {this.state.posts.map((post) => (\n            <div className={\"grid-posts\"}>\n              <ExPost key={post.post_id} post={post} type={this.props.type} />\n            </div>\n          ))}\n        </div>\n      );\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"module"}